{"version":3,"sources":["rules.js","App.js","reportWebVitals.js","index.js"],"names":["Rules","className","App","targetNumber","Math","round","random","useState","target","setTarget","compGuess","compScore","setCompScore","compResult","setCompResult","humanGuess","setHumanGuess","humanScore","setHumanScore","setRound","result","setResult","humanIsWinner","humanDiff","abs","compDiff","compareGuesses","initialHuman","initialComp","initialResult","initialTarget","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAuBeA,MArBf,WACI,OACI,sBAAKC,UAAU,QAAf,UACI,sBAAKA,UAAU,QAAf,UACI,wCACA,kEAEJ,sBAAKA,UAAU,QAAf,UACI,wCACA,uGAGJ,sBAAKA,UAAU,QAAf,UACI,wCACA,yECiIDC,MA7If,WAEA,IAAIC,EAAeC,KAAKC,MAAoB,EAAdD,KAAKE,UAFrB,EAGcC,mBAAS,KAHvB,mBAGPC,EAHO,KAGCC,EAHD,KAMVC,EAAYN,KAAKC,MAAoB,EAAdD,KAAKE,UANlB,EAOoBC,mBAAS,GAP7B,mBAOPI,EAPO,KAOIC,EAPJ,OAUsBL,mBAAS,KAV/B,mBAUPM,EAVO,KAUKC,EAVL,OAasBP,mBAAS,GAb/B,mBAaPQ,EAbO,KAaKC,EAbL,OAcsBT,mBAAS,GAd/B,mBAcPU,EAdO,KAcKC,EAdL,OA2BYX,mBAAS,GA3BrB,mBA2BPF,EA3BO,KA2BAc,EA3BA,OAiCcZ,mBAAS,IAjCvB,mBAiCPa,EAjCO,KAiCCC,EAjCD,KAmDRC,EAbiB,SAACP,EAAWL,EAAUP,GAC3C,IAAMoB,EAAYnB,KAAKoB,IAAIT,EAAaZ,GAClCsB,EAAWrB,KAAKoB,IAAId,EAAYP,GACtC,OAAIoB,IAAcE,GAEPF,EAAYE,EAQHC,CAAeX,EAAWL,EAAUP,GAnD5C,EAyEuBI,mBAAS,GAzEhC,mBAyEPoB,EAzEO,aA0EqBpB,mBAAS,MA1E9B,mBA0EPqB,EA1EO,aA2EyBrB,mBAAS,KA3ElC,mBA2EPsB,EA3EO,aA4EyBtB,mBAAS,MA5ElC,mBA4EPuB,EA5EO,KAsFZ,OAtFY,KAuFV,gCACA,oBAAI7B,UAAU,QAAd,wCAEA,wCAAWI,EAAX,OACA,iDAAoBG,KAEpB,oBAAIP,UAAU,SAAd,SAAwBmB,IAExB,sBAAKnB,UAAU,OAAf,UAEA,sBAAKA,UAAU,WAAf,UACI,0CACA,yCAAYU,KAChB,6BAAKE,OAIL,sBAAKZ,UAAU,QAAf,UACI,qCACA,yCAAYgB,KAEZ,qBAAKhB,UAAU,MAAf,SACA,6BAAKc,MAGL,sBAAKd,UAAU,UAAf,UACA,wBAAQ8B,QA3FQ,WACPf,EAAfD,EAAW,EAAkBA,EAAW,EAAmBA,IA0FrD,eACA,wBAAQgB,QAjGQ,WACPf,EAAfD,EAAW,EAAkBA,EAAW,EAAmBA,IAgGrD,kBAEA,qBAAKd,UAAU,YAAf,SACA,oBAAI8B,QA/DM,WAGdV,EADEC,EACQ,2CAEA,kDAEZb,EAAUN,GACVW,EAAcJ,GAEVY,EACFJ,EAAcD,EAAW,GAEzBL,EAAaD,EAAU,IAkDnB,kCASJ,uBAEA,qBAAKV,UAAY,YAAY8B,QApGf,WAChBZ,EAASd,EAAM,IAmGb,SACE,oBAAI0B,QAlDQ,WACdf,EAAcW,GACdb,EAAcc,GACdP,EAAUQ,GACVpB,EAAUqB,IA8CR,0BAIF,cAAC,EAAD,QC7HWE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3426fb1f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Rules(){\n    return (\n        <div className='rules'>\n            <div className='step1'>\n                <h3>Step 1</h3>\n                <p>Input a number between 0 and 9</p>\n            </div>\n            <div className='step2'>\n                <h3>Step 2</h3>\n                <p>Click \"Make a Guess\" to submit your guess and see who won the round</p>\n                \n            </div>\n            <div className='step3'>\n                <h3>Step 3</h3>\n                <p>Click \"Next Round\" to play again.</p>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default Rules;","import React, {useState} from 'react';\nimport './App.css'\nimport Rules from './rules'\n\nfunction App(){\n// Generate random target number between 0 and 9\nlet targetNumber = Math.round(Math.random()*9);\nconst [target, setTarget] = useState('?');\n\n// Generate computer guess\nlet compGuess = Math.round(Math.random()*9);\nconst [compScore, setCompScore] = useState(0);\n\n// Setting computer guess value, change later to show compGuess\nconst [compResult, setCompResult] = useState('?')\n\n// Setting humanGuess value\nconst [humanGuess, setHumanGuess] = useState(0);\nconst [humanScore, setHumanScore] = useState(0);\n\n// Increment button condition\nconst buttonIncrement = () => {\n  humanGuess<9 ? setHumanGuess(humanGuess+1) : setHumanGuess(humanGuess);\n    };\n\n// Decrement button condition\nconst buttonDecrement = () => {\n  humanGuess>0 ? setHumanGuess(humanGuess-1) : setHumanGuess(humanGuess);\n    }\n\n// Setting rounds\nconst [round, setRound] = useState(1);\nconst increment = () => {\n  setRound(round+1)\n};\n\n// Setting result\nconst [result, setResult] = useState('');\n\n\n\n// function to compare humanGuess, compGuess, and target number\nconst compareGuesses = (humanGuess,compGuess,targetNumber) => {\n  const humanDiff = Math.abs(humanGuess - targetNumber);\n  const compDiff = Math.abs(compGuess - targetNumber);\n  if (humanDiff === compDiff){\n    return true;\n  } else if (humanDiff < compDiff){\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// determine if human is the winner\nconst humanIsWinner = compareGuesses(humanGuess,compGuess,targetNumber);\n\n// function to determine & show winner\nconst makeGuess = () => {\n  // setting winner message\n  if (humanIsWinner){\n    setResult(<p>You win!!!</p>)\n  } else {\n    setResult(<p>Computer wins!!!</p>)\n  };\n  setTarget(targetNumber);\n  setCompResult(compGuess);\n  // updating winner score\n  if (humanIsWinner){\n    setHumanScore(humanScore+1)\n  } else {\n    setCompScore(compScore+1);\n  }\n}\n  \n\n// initial states\nconst [initialHuman, setInitHuman] = useState(0);\nconst [initialComp, setInitComp] = useState('?');\nconst [initialResult, setInitResult] = useState('');\nconst [initialTarget, setInitTarget] = useState('?');\n\n// function to reset & go to the next round\nconst nextRound = () => {\n    setHumanGuess(initialHuman);\n    setCompResult(initialComp);\n    setResult(initialResult);\n    setTarget(initialTarget);\n  }\n\n  return (\n    <div>\n    <h1 className='title'>Let's Play Number Guesser!</h1>\n    \n    <h1>Round {round} </h1>\n    <h3>Target number: {target}</h3>\n\n    <h4 className='winner'>{result}</h4>\n\n    <div className='game'>\n\n    <div className='computer'>\n        <h3>Computer</h3>\n        <h4>Score: {compScore}</h4>\n    <h1>{compResult}</h1>\n    </div>\n\n\n    <div className='human'>\n        <h3>You</h3>\n        <h4>Score: {humanScore}</h4>\n\n        <div className='box'>\n        <h1>{humanGuess}</h1>\n        </div>\n    \n        <div className='control'>\n        <button onClick={buttonDecrement}>-</button>\n        <button onClick={buttonIncrement}>+</button>\n        </div>\n        <div className='makeGuess'>\n        <h4 onClick={makeGuess}>Make a guess</h4>\n        </div>\n    </div>\n\n    </div>\n    \n\n\n\n    <br/>\n\n    <div className = 'nextRound' onClick={increment}>\n      <h3 onClick={nextRound}>Next Round</h3>\n      \n    </div>\n\n    <Rules/>\n    \n  </div>\n\n  \n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}